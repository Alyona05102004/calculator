//---------------------------------------------------------------------------

#include <vcl.h>
#include <System.hpp>
#include <string>
#include <string.h>
#include <cctype>
#pragma hdrstop

#include "Unit1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
using namespace std;
TForm1 *Form1;
float first_num=0.0;   //first number
float second_num=0.0;  //second number
char user_action=' ';   //mathematical action
float res=0.0; //result
String full = ""; //full expression
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------
void __fastcall TForm1::number_click(TObject *Sender)
{	TButton *button = dynamic_cast<TButton*>(Sender);
	if (Label1->Caption=="0") {
		Label1->Caption=button->Caption;
	}
	else {
        Label1->Caption+=button->Caption;
	}
	full += button->Caption;
	Label1->Caption = full;
}
//---------------------------------------------------------------------------
void __fastcall TForm1::btn_delClick(TObject *Sender)
{
//delenie
	math_action('/');
}
//---------------------------------------------------------------------------
void __fastcall TForm1::btn_umnojClick(TObject *Sender)
{
//umnojenie
	math_action('*');
}
//---------------------------------------------------------------------------
void __fastcall TForm1::btn_subClick(TObject *Sender)
{
//minus
	math_action('-');
}
//---------------------------------------------------------------------------
void __fastcall TForm1::btn_sumClick(TObject *Sender)
{
//plus
    math_action('+');
}
//---------------------------------------------------------------------------
void __fastcall TForm1::math_action(char action)
{if (user_action != ' ') {
		full = full.SubString(1, full.Length() - 1);
	}
	first_num = StrToFloat(Label1->Caption);
	user_action = action;
	full += action;
	Label1->Caption = full;
}

void __fastcall TForm1::btn_equalClick(TObject *Sender)
{    // Добавляем знак равенства в конец
	full += "=";
	Label1->Caption = full;
	String str = Label1->Caption;
	int lastCh = str.Length();

    float val = 0.0, val_tmp = 0.0;
    int step = 0;
    float S = 0, P = 1;
    int point_count = 0;
    int sn_count = 0;
    bool pl_min = true; // +;
	bool mul_div = true; // *;
     bool in_min_function = false; // Флаг для MIN функции
    float min_value = FLT_MAX;

	lastCh = str.Length();
   if (str.Pos("MIN(") > 0 && str[lastCh] != ')') {
        full += ")"; // Добавляем закрывающую скобку
        Label1->Caption = full; // Обновляем отображение
    }

	for (int i = 1; i <= lastCh; i++){


  switch(str[i])
  {
  case '0': { val=val*10+0; step++; sn_count=0; break; }
  case '1': { val=val*10+1; step++; sn_count=0; break;}
  case '2': { val=val*10+2; step++; sn_count=0; break; }
  case '3': { val=val*10+3; step++; sn_count=0; break; }
  case '4': { val=val*10+4; step++; sn_count=0; break;}
  case '5': { val=val*10+5; step++; sn_count=0; break;}
  case '6': { val=val*10+6; step++; sn_count=0; break;}
  case '7': { val=val*10+7; step++; sn_count=0; break;}
  case '8': { val=val*10+8; step++; sn_count=0; break;}
  case '9': { val=val*10+9; step++; sn_count=0; break;}
  case ',': { val_tmp=val; val=0; step=0; point_count++; sn_count=0; if (point_count>1) // 2 точки
			  { ShowMessage("2 точки"); i=lastCh; break;    }
  break;  }

  case '+': {  sn_count++;
	if (sn_count>1) {ShowMessage("2 знака"); i=lastCh; break; }

	if (point_count>0) { val=val_tmp+val*pow(10,-step);   }
	step=0; point_count=0;  val_tmp=0;
	if (mul_div==true) { P=P*val;}
	else { if (abs(val)<0.0000003)
			{ ShowMessage("Деление на 0"); i=lastCh; break;    }
			else { P=P/val; }
		 }
	 val=0;
	if (pl_min==true) { S=S+P;}
	else {S=S-P;}
	 pl_min=true; mul_div= true; P=1;
	  break;
	}

  case '-': {
    sn_count++;
	if (sn_count>1) {ShowMessage("2 знака"); i=lastCh; break; }


	if (point_count>0) { val=val_tmp+val*pow(10,-step);   }
	step=0; point_count=0;  val_tmp=0;
	if (mul_div==true) { P=P*val;}
	else { if (abs(val)<0.0000003)
			{ ShowMessage("Деление на 0"); i=lastCh; break;    }
			else { P=P/val; }
		 }
	val=0;
	if (pl_min==true) { S=S+P;}
	else {S=S-P;}
	 pl_min=false; mul_div= true; P=1;
	  break;
	}

	case '*': {

    sn_count++;
	if (sn_count>1) {ShowMessage("2 знака"); i=lastCh; break; }

	if (point_count>0) { val=val_tmp+val*pow(10,-step);   }
	step=0; point_count=0;  val_tmp=0;
	if (mul_div==true) { P=P*val;}
	else { if (abs(val)<0.0000003)
			{ ShowMessage("Деление на 0"); i=lastCh; break;    }
			else { P=P/val; }
		 }
	 val=0;
	mul_div= true;
	   break;
	}

	case '/': {
    sn_count++;
	if (sn_count>1) {ShowMessage("2 знака"); i=lastCh; break; }

	if (point_count>0) { val=val_tmp+val*pow(10,-step);   }
	step=0; point_count=0;  val_tmp=0;
	if (mul_div==true) { P=P*val;}
	else { if (abs(val)<0.0000003)
			{ ShowMessage("Деление на 0"); i=lastCh; break;    }
			else { P=P/val; }
		 }
	val=0;
	mul_div= false;
        break;
	}

    case 'M': { // Начало функции MIN
                if (str.SubString(i, 3) == "MIN") {
                    in_min_function = true;
                    i += 2; // Пропускаем 'I' и 'N'
                    continue;
                }
                break;
			}

  case ';': { // Конец аргумента MIN
                if (in_min_function) {
                    if (val < min_value) {
                        min_value = val; // Обновляем минимальное значение
                    }
                    val = 0; // Сбрасываем val для следующего аргумента
                    step = 0; // Сбрасываем шаг
                    point_count = 0; // Сбрасываем счетчик точек
                }
                break;
            }


   case '=': {
            if (in_min_function) {
                    if (val < min_value) {
                        min_value = val; // Проверяем последнее значение
                    }
                    full += FloatToStrF(min_value, ffGeneral, 5, 2);
                    Label1->Caption = full; // Обновляем отображение
                    return; // Выходим из функции
                }

			 if (point_count>0) { val=val_tmp+val*pow(10,-step);   }
			step=0; point_count=0;  val_tmp=0;
			if (mul_div==true) { P=P*val;}
			else { if (abs(val)<0.0000003)
					{ ShowMessage("Деление на 0"); i=lastCh; break;    }
					else { P=P/val; }
			 }
			 val=0;
			if (pl_min==true) { S=S+P;}
			else {S=S-P;}
			 pl_min=true; mul_div= true; P=1;   i=lastCh;
			 break; }
  default:{ ShowMessage("Символ!!!"); i=lastCh; break;}

  }


}

if (str[lastCh]=='*' || str[lastCh]=='/'  ) {

	if (pl_min==true) { S=S+P;}
	else {S=S-P;}
}


	full += FloatToStrF(S,ffGeneral,5,2);
    Label1->Caption = full; // Обновляем отображение
}

//---------------------------------------------------------------------------
void __fastcall TForm1::btn_delete_allClick(TObject *Sender)
{
//delete all
	Label1->Caption="0";
	first_num=0.0;
	second_num=0.0;
	user_action=' ';
	res=0.0;
    full = "";
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------

void __fastcall TForm1::btn_backspaceClick(TObject *Sender)
{
   if (full.Length() > 0) {
	full = full.SubString(1, full.Length() - 1);
    Label1->Caption = full;
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm1::btn_minClick(TObject *Sender)
{
	if (Label1->Caption != "0") {
        full = "MIN(" + Label1->Caption + ";";
        Label1->Caption = full;
    }
}
//---------------------------------------------------------------------------

